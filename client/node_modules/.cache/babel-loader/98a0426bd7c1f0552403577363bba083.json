{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrectUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailue, sin } from './user.actions';\nimport UserActionTypes from './user.types';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailue(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailue(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailue(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrectUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailue(error));\n  }\n}\nexport function* signOut() {}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSigInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSigInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/home/damtrix/Documents/start/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrectUser","signInSuccess","signInFailue","sin","UserActionTypes","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onCheckUserSession","CHECK_USER_SESSION","onGoogleSigInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,GAAtC,QAAiD,gBAAjD;AACA,OAAOC,eAAP,MAA6B,cAA7B;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC/C,MAAG;AACH,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAAEG,yBAAF,EAA6BO,QAA7B,CAA1B;AACI,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACO,aAAa,CAAC;AACpBS,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAACQ,YAAY,CAACU,KAAD,CAAb,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAC5B,MAAI;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMjB,IAAI,CAACkB,eAAL,CAAqBjB,cAArB,CAArB;AACA,UAAMO,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHG,CAGF,OAAMF,KAAN,EAAa;AACX,UAAMlB,GAAG,CAACQ,YAAY,CAACU,KAAD,CAAb,CAAT;AACH;AAEJ;AAED,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAV,CAA1B,EAA0D;AAC7D,MAAI;AACA,UAAM;AAACL,MAAAA;AAAD,QAAS,MAAMjB,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,KAAN,EAAa;AACX,UAAMlB,GAAG,CAACQ,YAAY,CAACU,KAAD,CAAb,CAAT;AACH;AAEJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACvC,MAAI;AACA,UAAMf,QAAQ,GAAG,MAAMN,cAAc,EAArC;AACA,QAAG,CAACM,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAMM,KAAN,EAAa;AACX,UAAMlB,GAAG,CAACQ,YAAY,CAACU,KAAD,CAAb,CAAT;AACH;AACA;AAED,OAAQ,UAAUU,OAAV,GAAoB,CAE3B;AAED,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACW,eAAe,CAACoB,kBAAjB,EAAqCH,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUI,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CAACW,eAAe,CAACsB,oBAAjB,EAAuCb,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUc,kBAAV,GAA+B;AAClC,QAAMlC,UAAU,CAACW,eAAe,CAACwB,mBAAjB,EAAsCZ,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUa,cAAV,GAA2B;AAC9B,QAAMpC,UAAU,CAACW,eAAe,CAAC0B,cAAjB,EAAiCR,OAAjC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAsB;AACzB,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC6B,kBAAD,CAAL,EAA2B7B,IAAI,CAAC+B,kBAAD,CAA/B,EAAqD/B,IAAI,CAAC2B,kBAAD,CAAzD,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrectUser } from '../../firebase/firebase.utils'\nimport { signInSuccess, signInFailue, sin } from './user.actions'\nimport UserActionTypes  from './user.types'\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try{\n    const userRef = yield call (createUserProfileDocument, userAuth)\n        const userSnapshot = yield userRef.get()\n        yield put(signInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    } catch (error) {\n        yield put(signInFailue(error))\n    }\n}\n\nexport function* signInWithGoogle() {\n        try {\n        const {user} = yield auth.signInWithPopup(googleProvider)\n        yield getSnapshotFromUserAuth(user)\n    } catch(error) {\n        yield put(signInFailue(error))\n    }\n\n}\n\nexport function* signInWithEmail({payload: { email, password }}) {\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password)\n        yield getSnapshotFromUserAuth(user)\n    } catch(error) {\n        yield put(signInFailue(error))\n    }\n\n}\n\nexport function* isUserAuthenticated() {\ntry {\n    const userAuth = yield getCurrectUser()\n    if(!userAuth) return\n    yield getSnapshotFromUserAuth(userAuth)\n} catch(error) {\n    yield put(signInFailue(error))\n}\n}\n\nexport  function* signOut() {\n\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated )\n}\n\nexport function* onGoogleSigInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSigInStart), call(onEmailSignInStart), call(onCheckUserSession)])\n} "]},"metadata":{},"sourceType":"module"}