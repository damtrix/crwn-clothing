{"ast":null,"code":"var _jsxFileName = \"/home/damtrix/Documents/start/crwn-clothing/src/components/sign-up/sign-up.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { signUpStart } from '../../redux/user/user.actions';\nimport './sign-up.styles.scss';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = userCredentials;\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"password dont match\");\n      return;\n    }\n\n    signUpStart({\n      displayName,\n      email,\n      password\n    });\n  };\n\n  handleOnchange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, \"I do not have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Sign up with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"sign-up-form\",\n    onSubmit: this.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    type: \"text\",\n    name: \"displayName\",\n    value: displayName,\n    onChange: handleOnchange,\n    label: \"Display Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    onChange: handleOnchange,\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleOnchange,\n    label: \"Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: handleOnchange,\n    label: \"Confirm Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, \"SIGN UP\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["/home/damtrix/Documents/start/crwn-clothing/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","signUpStart","SignUp","userCredentials","setCredentials","displayName","email","password","confirmPassword","handleSubmit","event","preventDefault","alert","handleOnchange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\nimport { signUpStart } from '../../redux/user/user.actions'\nimport './sign-up.styles.scss'\n\n\nconst SignUp = ({ signUpStart }) => {\n    const [userCredentials, setCredentials ] = useState({ \n        displayName: '', email: '', password: '', confirmPassword: ''\n    })\n     \n    const {displayName, email, password, confirmPassword} = userCredentials\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        if(password !== confirmPassword) {\n            alert(\"password dont match\");\n            return;\n        }\n        signUpStart({ displayName, email, password })\n    }\n\n    handleOnchange = event => {\n        const { name, value } = event.target\n\n\n        setCredentials({ ...userCredentials, [name]: value })\n    }\n    \n        return (\n            <div className = 'sign-up'>\n                <h2 className = 'title'>I do not have an account</h2>\n                <span>Sign up with your email and password</span>\n                <form className = 'sign-up-form' onSubmit = {this.handleSubmit}>\n                    <FormInput\n                     type = 'text'\n                     name = 'displayName'\n                     value = { displayName }\n                     onChange = { handleOnchange }\n                     label = 'Display Name'\n                     required\n                    />\n                    <FormInput\n                     type = 'email'\n                     name = 'email'\n                     value = { email }\n                     onChange = { handleOnchange }\n                     label = 'Email'\n                     required\n                    />\n                    <FormInput\n                     type = 'password'\n                     name = 'password'\n                     value = { password }\n                     onChange = { handleOnchange }\n                     label = 'Password'\n                     required\n                    />\n                    <FormInput\n                     type = 'password'\n                     name = 'confirmPassword'\n                     value = { confirmPassword }\n                     onChange = { handleOnchange }\n                     label = 'Confirm Password'\n                     required\n                    />\n                    <CustomButton type = 'submit'>SIGN UP</CustomButton>\n                </form>\n                \n            </div>\n        )\n    }\n\nconst mapDispatchToProps = dispatch => ({\n    signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n})\n\nexport default connect(null, mapDispatchToProps)(SignUp)"]},"metadata":{},"sourceType":"module"}