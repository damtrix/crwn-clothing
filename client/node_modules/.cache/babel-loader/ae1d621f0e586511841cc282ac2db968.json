{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyB7sbUwI333RrXdBMLTBXLRCch6kdFUWic\",\n  authDomain: \"crwn-db-b90c2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-b90c2.firebaseio.com\",\n  projectId: \"crwn-db-b90c2\",\n  storageBucket: \"crwn-db-b90c2.appspot.com\",\n  messagingSenderId: \"416406432240\",\n  appId: \"1:416406432240:web:a767aec4984d2a5c729535\",\n  measurementId: \"G-CQVQBKYZ1E\"\n};\nexport const createUserProfileDocument = async (userAuth, additionData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionData\n      });\n    } catch (error) {\n      console.log('error creating user:', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAddDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrectUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(userAuth => {\n      unSubscribe();\n      resolve(user);\n    });\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/home/damtrix/Documents/start/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAddDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","getCurrectUser","Promise","resolve","reject","unSubscribe","auth","onAuthStateChanged","user","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyB7sbUwI333RrXdBMLTBXLRCch6kdFUWic\",\n    authDomain: \"crwn-db-b90c2.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-b90c2.firebaseio.com\",\n    projectId: \"crwn-db-b90c2\",\n    storageBucket: \"crwn-db-b90c2.appspot.com\",\n    messagingSenderId: \"416406432240\",\n    appId: \"1:416406432240:web:a767aec4984d2a5c729535\",\n    measurementId: \"G-CQVQBKYZ1E\"\n  }\n\n export const createUserProfileDocument = async (userAuth, additionData) => {\n    if (!userAuth) return;\n      \n      const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n      const snapShot = await userRef.get();\n      \n      if(!snapShot.exists) {\n         const {displayName, email} = userAuth\n         const createdAt = new Date();\n\n         try {\n            await userRef.set({\n               displayName,\n               email,\n               createdAt,\n               ...additionData\n            })\n         } \n         catch(error){\n            console.log('error creating user:', error.message);\n         }\n      }\n      return userRef\n      \n }\n\n  export const addCollectionAddDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n    \n    const batch = firestore.batch()\n    objectsToAdd.forEach(obj => {\n       const newDocRef = collectionRef.doc()\n       batch.set (newDocRef, obj)\n    })\n    return await batch.commit()\n } \n\n export const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n       const { title, items } = doc.data()\n\n       return {\n          routeName: encodeURI(title.toLowerCase()),\n          id: doc.id,\n          title,\n          items\n       }\n    })\n    return transformedCollection.reduce((accumulator, collection) => {\n       accumulator[collection.title.toLowerCase()] = collection\n       return accumulator\n    }, {})\n      \n }\n\n\n  firebase.initializeApp(config);\n\n  export const getCurrectUser = () => {\n     return new Promise((resolve, reject) => {\n        const unSubscribe = auth.onAuthStateChanged(userAuth => {\n           unSubscribe()\n           resolve(user)\n        })\n     })\n  } \n\n  export const auth = firebase.auth()\n  export const firestore = firebase.firestore()\n\n  export const googleProvider = new firebase.auth.GoogleAuthProvider()\n  googleProvider.setCustomParameters ({ prompt: 'select_account' })\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\n  export default firebase "]},"metadata":{},"sourceType":"module"}